// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: helloworld/proto/sensitive.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SensitiveFilter_Validate_FullMethodName = "/sensitive.SensitiveFilter/Validate"
)

// SensitiveFilterClient is the client API for SensitiveFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensitiveFilterClient interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type sensitiveFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewSensitiveFilterClient(cc grpc.ClientConnInterface) SensitiveFilterClient {
	return &sensitiveFilterClient{cc}
}

func (c *sensitiveFilterClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, SensitiveFilter_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensitiveFilterServer is the server API for SensitiveFilter service.
// All implementations must embed UnimplementedSensitiveFilterServer
// for forward compatibility
type SensitiveFilterServer interface {
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedSensitiveFilterServer()
}

// UnimplementedSensitiveFilterServer must be embedded to have forward compatible implementations.
type UnimplementedSensitiveFilterServer struct {
}

func (UnimplementedSensitiveFilterServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedSensitiveFilterServer) mustEmbedUnimplementedSensitiveFilterServer() {}

// UnsafeSensitiveFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensitiveFilterServer will
// result in compilation errors.
type UnsafeSensitiveFilterServer interface {
	mustEmbedUnimplementedSensitiveFilterServer()
}

func RegisterSensitiveFilterServer(s grpc.ServiceRegistrar, srv SensitiveFilterServer) {
	s.RegisterService(&SensitiveFilter_ServiceDesc, srv)
}

func _SensitiveFilter_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveFilterServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensitiveFilter_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveFilterServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensitiveFilter_ServiceDesc is the grpc.ServiceDesc for SensitiveFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensitiveFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensitive.SensitiveFilter",
	HandlerType: (*SensitiveFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _SensitiveFilter_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/proto/sensitive.proto",
}
