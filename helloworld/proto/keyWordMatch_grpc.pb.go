// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: helloworld/proto/keyWordMatch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyWordFilter_Match_FullMethodName = "/keyword.KeyWordFilter/Match"
)

// KeyWordFilterClient is the client API for KeyWordFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyWordFilterClient interface {
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
}

type keyWordFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyWordFilterClient(cc grpc.ClientConnInterface) KeyWordFilterClient {
	return &keyWordFilterClient{cc}
}

func (c *keyWordFilterClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, KeyWordFilter_Match_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyWordFilterServer is the server API for KeyWordFilter service.
// All implementations must embed UnimplementedKeyWordFilterServer
// for forward compatibility
type KeyWordFilterServer interface {
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
	mustEmbedUnimplementedKeyWordFilterServer()
}

// UnimplementedKeyWordFilterServer must be embedded to have forward compatible implementations.
type UnimplementedKeyWordFilterServer struct {
}

func (UnimplementedKeyWordFilterServer) Match(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedKeyWordFilterServer) mustEmbedUnimplementedKeyWordFilterServer() {}

// UnsafeKeyWordFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyWordFilterServer will
// result in compilation errors.
type UnsafeKeyWordFilterServer interface {
	mustEmbedUnimplementedKeyWordFilterServer()
}

func RegisterKeyWordFilterServer(s grpc.ServiceRegistrar, srv KeyWordFilterServer) {
	s.RegisterService(&KeyWordFilter_ServiceDesc, srv)
}

func _KeyWordFilter_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyWordFilterServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyWordFilter_Match_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyWordFilterServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyWordFilter_ServiceDesc is the grpc.ServiceDesc for KeyWordFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyWordFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyword.KeyWordFilter",
	HandlerType: (*KeyWordFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _KeyWordFilter_Match_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/proto/keyWordMatch.proto",
}
